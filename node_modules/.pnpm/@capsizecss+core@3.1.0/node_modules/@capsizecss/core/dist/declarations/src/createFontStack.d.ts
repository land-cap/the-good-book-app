import type { AtRule } from 'csstype';
import type { FontMetrics } from './types';
export declare const toCssProperty: (property: string) => string;
declare type FontStackMetrics = Pick<FontMetrics, 'familyName' | 'ascent' | 'descent' | 'lineGap' | 'unitsPerEm' | 'xWidthAvg'>;
export declare const quoteIfNeeded: (name: string) => string;
declare type FontFace = {
    '@font-face': Omit<AtRule.FontFace, 'src' | 'fontFamily'> & Required<Pick<AtRule.FontFace, 'src' | 'fontFamily'>>;
};
declare type AdditionalFontFaceProperties = Omit<AtRule.FontFace, 'src' | 'fontFamily' | 'ascentOverride' | 'descentOverride' | 'lineGapOverride'>;
declare type CreateFontStackOptions = {
    /**
     * Additional properties to add to the generated `@font-face` declarations.
     *
     * Accepts all valid `@font-face` properties except the following which are
     * generated by Capsize: `src`, `fontFamily`, `ascentOverride`,
     * `descentOverride`, `lineGapOverride`, although allows `size-adjust` to
     * support explicit overrides.
     */
    fontFaceProperties?: AdditionalFontFaceProperties;
};
declare type FontFaceFormatString = {
    /**
     * Choose between returning CSS as a string for stylesheets or `style` tags,
     * or as a style object for CSS-in-JS integration.
     *
     * Default: `styleString`
     */
    fontFaceFormat?: 'styleString';
};
declare type FontFaceFormatObject = {
    fontFaceFormat?: 'styleObject';
};
export declare function createFontStack(fontStackMetrics: FontStackMetrics[], options?: CreateFontStackOptions & FontFaceFormatString): {
    fontFamily: string;
    fontFaces: string;
};
export declare function createFontStack(fontStackMetrics: FontStackMetrics[], options?: CreateFontStackOptions & FontFaceFormatObject): {
    fontFamily: string;
    fontFaces: FontFace[];
};
export {};
