import {
  dom
} from "./chunk-ZZ5TA5X3.mjs";

// src/combobox.machine.ts
import { ariaHidden } from "@zag-js/aria-hidden";
import { createMachine, guards } from "@zag-js/core";
import { contains, raf } from "@zag-js/dom-query";
import { observeAttributes, observeChildren } from "@zag-js/mutation-observer";
import { trackInteractOutside } from "@zag-js/interact-outside";
import { createLiveRegion } from "@zag-js/live-region";
import { getPlacement } from "@zag-js/popper";
import { compact } from "@zag-js/utils";
var { and, not } = guards;
function machine(userContext) {
  const ctx = compact(userContext);
  return createMachine(
    {
      id: "combobox",
      initial: ctx.autoFocus ? "focused" : "idle",
      context: {
        loop: true,
        openOnClick: false,
        ariaHidden: true,
        focusedId: null,
        focusedOptionData: null,
        navigationData: null,
        selectionData: null,
        inputValue: "",
        liveRegion: null,
        focusOnClear: true,
        selectInputOnFocus: false,
        selectOnTab: true,
        isHovering: false,
        isKeyboardEvent: false,
        allowCustomValue: false,
        isCustomValue: (data) => data.inputValue !== data.previousValue,
        inputBehavior: "none",
        selectionBehavior: "set",
        ...ctx,
        positioning: {
          placement: "bottom",
          flip: false,
          sameWidth: true,
          ...ctx.positioning
        },
        translations: {
          triggerLabel: "Toggle suggestions",
          clearTriggerLabel: "Clear value",
          navigationHint: "use the up and down keys to navigate. Press the enter key to select",
          countAnnouncement: (count) => `${count} ${count === 1 ? "option" : "options"} available`,
          ...ctx.translations
        }
      },
      computed: {
        isInputValueEmpty: (ctx2) => ctx2.inputValue.length === 0,
        isInteractive: (ctx2) => !(ctx2.readOnly || ctx2.disabled),
        autoComplete: (ctx2) => ctx2.inputBehavior === "autocomplete",
        autoHighlight: (ctx2) => ctx2.inputBehavior === "autohighlight"
      },
      watch: {
        inputValue: "invokeOnInputChange",
        navigationData: "invokeOnHighlight",
        selectionData: ["invokeOnSelect", "blurInputIfNeeded"],
        focusedId: "setSectionLabel"
      },
      entry: ["setupLiveRegion"],
      exit: ["removeLiveRegion"],
      activities: ["syncInputValue"],
      on: {
        SET_VALUE: {
          actions: ["setInputValue", "setSelectionData"]
        },
        SET_INPUT_VALUE: {
          actions: "setInputValue"
        },
        CLEAR_VALUE: [
          {
            guard: "focusOnClear",
            target: "focused",
            actions: ["clearInputValue", "clearSelectedValue"]
          },
          {
            actions: ["clearInputValue", "clearSelectedValue"]
          }
        ],
        POINTER_OVER: {
          actions: "setIsHovering"
        },
        POINTER_LEAVE: {
          actions: "clearIsHovering"
        }
      },
      states: {
        idle: {
          tags: ["idle"],
          entry: ["scrollToTop", "clearFocusedOption"],
          on: {
            CLICK_BUTTON: {
              target: "interacting",
              actions: ["focusInput", "invokeOnOpen"]
            },
            CLICK_INPUT: {
              guard: "openOnClick",
              target: "interacting",
              actions: "invokeOnOpen"
            },
            FOCUS: "focused"
          }
        },
        focused: {
          tags: ["focused"],
          entry: ["focusInput", "scrollToTop", "clearFocusedOption"],
          activities: ["trackInteractOutside"],
          on: {
            CHANGE: {
              target: "suggesting",
              actions: "setInputValue"
            },
            BLUR: "idle",
            ESCAPE: {
              guard: and("isCustomValue", not("allowCustomValue")),
              actions: "revertInputValue"
            },
            CLICK_INPUT: {
              guard: "openOnClick",
              target: "interacting",
              actions: ["focusInput", "invokeOnOpen"]
            },
            CLICK_BUTTON: {
              target: "interacting",
              actions: ["focusInput", "invokeOnOpen"]
            },
            POINTER_OVER: {
              actions: "setIsHovering"
            },
            ARROW_UP: [
              {
                guard: "autoComplete",
                target: "interacting",
                actions: "invokeOnOpen"
              },
              {
                target: "interacting",
                actions: ["focusLastOption", "invokeOnOpen"]
              }
            ],
            ARROW_DOWN: [
              {
                guard: "autoComplete",
                target: "interacting",
                actions: "invokeOnOpen"
              },
              {
                target: "interacting",
                actions: ["focusFirstOption", "invokeOnOpen"]
              }
            ],
            ALT_ARROW_DOWN: {
              target: "interacting",
              actions: ["focusInput", "invokeOnOpen"]
            }
          }
        },
        suggesting: {
          tags: ["open", "focused"],
          activities: [
            "trackInteractOutside",
            "scrollOptionIntoView",
            "computePlacement",
            "trackOptionNodes",
            "hideOtherElements"
          ],
          entry: ["focusInput", "invokeOnOpen"],
          on: {
            ARROW_DOWN: {
              target: "interacting",
              actions: "focusNextOption"
            },
            ARROW_UP: {
              target: "interacting",
              actions: "focusPrevOption"
            },
            ALT_ARROW_UP: "focused",
            HOME: {
              target: "interacting",
              actions: ["focusFirstOption", "preventDefault"]
            },
            END: {
              target: "interacting",
              actions: ["focusLastOption", "preventDefault"]
            },
            ENTER: [
              {
                guard: and("hasFocusedOption", "autoComplete"),
                target: "focused",
                actions: "selectActiveOption"
              },
              {
                guard: "hasFocusedOption",
                target: "focused",
                actions: "selectOption"
              }
            ],
            CHANGE: [
              {
                guard: "autoHighlight",
                actions: ["clearFocusedOption", "setInputValue", "focusFirstOption"]
              },
              {
                actions: ["clearFocusedOption", "setInputValue"]
              }
            ],
            ESCAPE: {
              target: "focused",
              actions: "invokeOnClose"
            },
            POINTEROVER_OPTION: [
              {
                guard: "autoComplete",
                target: "interacting",
                actions: "setActiveOption"
              },
              {
                target: "interacting",
                actions: ["setActiveOption", "setNavigationData"]
              }
            ],
            BLUR: {
              target: "idle",
              actions: "invokeOnClose"
            },
            CLICK_BUTTON: {
              target: "focused",
              actions: "invokeOnClose"
            },
            CLICK_OPTION: {
              target: "focused",
              actions: ["selectOption", "invokeOnClose"]
            }
          }
        },
        interacting: {
          tags: ["open", "focused"],
          activities: ["scrollOptionIntoView", "trackInteractOutside", "computePlacement", "hideOtherElements"],
          entry: "focusMatchingOption",
          on: {
            HOME: {
              actions: ["focusFirstOption", "preventDefault"]
            },
            END: {
              actions: ["focusLastOption", "preventDefault"]
            },
            ARROW_DOWN: [
              {
                guard: and("autoComplete", "isLastOptionFocused"),
                actions: ["clearFocusedOption", "scrollToTop"]
              },
              { actions: "focusNextOption" }
            ],
            ARROW_UP: [
              {
                guard: and("autoComplete", "isFirstOptionFocused"),
                actions: "clearFocusedOption"
              },
              {
                actions: "focusPrevOption"
              }
            ],
            ALT_UP: {
              target: "focused",
              actions: ["selectOption", "invokeOnClose"]
            },
            CLEAR_FOCUS: {
              actions: "clearFocusedOption"
            },
            TAB: {
              guard: "selectOnTab",
              target: "idle",
              actions: ["selectOption", "invokeOnClose"]
            },
            ENTER: {
              target: "focused",
              actions: ["selectOption", "invokeOnClose"]
            },
            CHANGE: [
              {
                guard: "autoComplete",
                target: "suggesting",
                actions: ["commitNavigationData", "setInputValue"]
              },
              {
                target: "suggesting",
                actions: ["clearFocusedOption", "setInputValue"]
              }
            ],
            POINTEROVER_OPTION: [
              {
                guard: "autoComplete",
                actions: "setActiveOption"
              },
              {
                actions: ["setActiveOption", "setNavigationData"]
              }
            ],
            CLICK_OPTION: {
              target: "focused",
              actions: ["selectOption", "invokeOnClose"]
            },
            ESCAPE: {
              target: "focused",
              actions: "invokeOnClose"
            },
            CLICK_BUTTON: {
              target: "focused",
              actions: "invokeOnClose"
            },
            BLUR: {
              target: "idle",
              actions: "invokeOnClose"
            }
          }
        }
      }
    },
    {
      guards: {
        openOnClick: (ctx2) => !!ctx2.openOnClick,
        isInputValueEmpty: (ctx2) => ctx2.isInputValueEmpty,
        focusOnClear: (ctx2) => !!ctx2.focusOnClear,
        autoFocus: (ctx2) => !!ctx2.autoFocus,
        autoComplete: (ctx2) => ctx2.autoComplete,
        autoHighlight: (ctx2) => ctx2.autoHighlight,
        isFirstOptionFocused: (ctx2) => dom.getFirstEl(ctx2)?.id === ctx2.focusedId,
        isLastOptionFocused: (ctx2) => dom.getLastEl(ctx2)?.id === ctx2.focusedId,
        isCustomValue: (ctx2) => !!ctx2.isCustomValue?.({ inputValue: ctx2.inputValue, previousValue: ctx2.selectionData?.value }),
        allowCustomValue: (ctx2) => !!ctx2.allowCustomValue,
        hasFocusedOption: (ctx2) => !!ctx2.focusedId,
        selectOnTab: (ctx2) => !!ctx2.selectOnTab
      },
      activities: {
        syncInputValue: (ctx2) => {
          const input = dom.getInputEl(ctx2);
          return observeAttributes(input, ["data-value"], () => {
            if (!input)
              return;
            const value = input.dataset.value || "";
            input.value = value;
            input.selectionStart = value.length;
            input.selectionEnd = value.length;
          });
        },
        trackInteractOutside(ctx2, _evt, { send }) {
          return trackInteractOutside(dom.getInputEl(ctx2), {
            exclude(target) {
              const ignore = [dom.getContentEl(ctx2), dom.getTriggerEl(ctx2)];
              return ignore.some((el) => contains(el, target));
            },
            onInteractOutside(event) {
              ctx2.onInteractOutside?.(event);
              if (event.defaultPrevented)
                return;
              send({ type: "BLUR", src: "interact-outside" });
            }
          });
        },
        hideOtherElements(ctx2) {
          if (!ctx2.ariaHidden)
            return;
          return ariaHidden([dom.getInputEl(ctx2), dom.getContentEl(ctx2), dom.getTriggerEl(ctx2)]);
        },
        computePlacement(ctx2) {
          ctx2.currentPlacement = ctx2.positioning.placement;
          return getPlacement(dom.getControlEl(ctx2), dom.getPositionerEl(ctx2), {
            ...ctx2.positioning,
            onComplete(data) {
              ctx2.currentPlacement = data.placement;
            },
            onCleanup() {
              ctx2.currentPlacement = void 0;
            }
          });
        },
        // in event the options are fetched (async), we still want to auto-highlight the first option
        trackOptionNodes(ctx2, evt, meta) {
          if (!ctx2.autoHighlight)
            return;
          const focusFirstOption = meta.getAction("focusFirstOption");
          const exec = () => focusFirstOption(ctx2, evt, meta);
          exec();
          return observeChildren(dom.getContentEl(ctx2), exec);
        },
        scrollOptionIntoView(ctx2, _evt, { getState }) {
          const input = dom.getInputEl(ctx2);
          return observeAttributes(input, ["aria-activedescendant"], () => {
            const evt = getState().event;
            const isKeyboardEvent = /(ARROW_UP|ARROW_DOWN|HOME|END|TAB)/.test(evt.type);
            if (!isKeyboardEvent)
              return;
            const option = dom.getActiveOptionEl(ctx2);
            option?.scrollIntoView({ block: "nearest" });
            if (ctx2.autoComplete) {
              dom.focusInput(ctx2);
            }
          });
        }
      },
      actions: {
        setupLiveRegion(ctx2) {
          ctx2.liveRegion = createLiveRegion({
            level: "assertive",
            document: dom.getDoc(ctx2)
          });
        },
        removeLiveRegion(ctx2) {
          ctx2.liveRegion?.destroy();
        },
        setActiveOption(ctx2, evt) {
          const { label, id, value } = evt;
          ctx2.focusedId = id;
          ctx2.focusedOptionData = { label, value };
        },
        setNavigationData(ctx2, evt) {
          const { label, value } = evt;
          ctx2.navigationData = { label, value };
        },
        clearNavigationData(ctx2) {
          ctx2.navigationData = null;
        },
        commitNavigationData(ctx2) {
          if (!ctx2.navigationData)
            return;
          ctx2.inputValue = ctx2.navigationData.label;
          ctx2.navigationData = null;
        },
        clearFocusedOption(ctx2) {
          ctx2.focusedId = null;
          ctx2.focusedOptionData = null;
          ctx2.navigationData = null;
        },
        selectActiveOption(ctx2) {
          if (!ctx2.focusedOptionData)
            return;
          ctx2.selectionData = ctx2.focusedOptionData;
          ctx2.inputValue = ctx2.focusedOptionData.label;
        },
        selectOption(ctx2, evt) {
          const isOptionEvent = !!evt.value && !!evt.label;
          ctx2.selectionData = isOptionEvent ? {
            label: evt.label,
            value: evt.value
          } : ctx2.navigationData;
          let value;
          if (!ctx2.selectionData)
            return;
          if (ctx2.selectionBehavior === "set") {
            value = ctx2.selectionData.label;
          }
          if (ctx2.selectionBehavior === "clear") {
            value = "";
          }
          if (value != null) {
            ctx2.inputValue = value;
          }
        },
        blurInputIfNeeded(ctx2) {
          if (ctx2.autoComplete || !ctx2.blurOnSelect)
            return;
          raf(() => {
            dom.getInputEl(ctx2)?.blur();
          });
        },
        focusInput(ctx2, evt) {
          if (evt.type === "CHANGE")
            return;
          dom.focusInput(ctx2);
        },
        setInputValue(ctx2, evt) {
          const value = evt.type === "SET_VALUE" ? evt.label : evt.value;
          ctx2.inputValue = value;
        },
        clearInputValue(ctx2) {
          ctx2.inputValue = "";
        },
        revertInputValue(ctx2) {
          if (!ctx2.selectionData)
            return;
          ctx2.inputValue = ctx2.selectionData.label;
        },
        setSelectionData(ctx2, evt) {
          const { label, value } = evt;
          ctx2.selectionData = { label, value };
        },
        clearSelectedValue(ctx2) {
          ctx2.selectionData = null;
        },
        scrollToTop(ctx2) {
          const listbox = dom.getContentEl(ctx2);
          if (!listbox)
            return;
          listbox.scrollTop = 0;
        },
        invokeOnInputChange(ctx2) {
          ctx2.onInputChange?.({ value: ctx2.inputValue });
        },
        invokeOnHighlight(ctx2) {
          const { label, value } = ctx2.navigationData ?? {};
          const relatedTarget = dom.getMatchingOptionEl(ctx2, value);
          ctx2.onHighlight?.({ label, value, relatedTarget });
        },
        invokeOnSelect(ctx2) {
          const { label, value } = ctx2.selectionData ?? {};
          const relatedTarget = dom.getMatchingOptionEl(ctx2, value);
          ctx2.onSelect?.({ label, value, relatedTarget });
        },
        invokeOnOpen(ctx2) {
          ctx2.onOpen?.();
        },
        invokeOnClose(ctx2) {
          ctx2.onClose?.();
        },
        highlightFirstOption(ctx2) {
          raf(() => {
            setHighlight(ctx2, dom.getFirstEl(ctx2));
          });
        },
        focusFirstOption(ctx2) {
          raf(() => {
            setFocus(ctx2, dom.getFirstEl(ctx2));
          });
        },
        focusLastOption(ctx2) {
          raf(() => {
            setFocus(ctx2, dom.getLastEl(ctx2));
          });
        },
        focusNextOption(ctx2) {
          raf(() => {
            const option = dom.getNextEl(ctx2, ctx2.focusedId ?? "");
            setFocus(ctx2, option);
          });
        },
        focusPrevOption(ctx2) {
          raf(() => {
            let option = dom.getPrevEl(ctx2, ctx2.focusedId ?? "");
            setFocus(ctx2, option);
          });
        },
        focusMatchingOption(ctx2) {
          raf(() => {
            const option = dom.getMatchingOptionEl(ctx2, ctx2.selectionData?.value);
            option?.scrollIntoView({ block: "nearest" });
            setFocus(ctx2, option);
          });
        },
        announceOptionCount(ctx2) {
          raf(() => {
            const count = dom.getOptionCount(ctx2);
            if (!count)
              return;
            const text = ctx2.translations.countAnnouncement(count);
            ctx2.liveRegion?.announce(text);
          });
        },
        setIsHovering(ctx2) {
          ctx2.isHovering = true;
        },
        clearIsHovering(ctx2) {
          ctx2.isHovering = false;
        },
        preventDefault(_ctx, evt) {
          evt.preventDefault();
        },
        setSectionLabel(ctx2) {
          const label = dom.getClosestSectionLabel(ctx2);
          if (!label)
            return;
          ctx2.sectionLabel = label;
        }
      }
    }
  );
}
function setHighlight(ctx, option) {
  if (!option)
    return;
  const data = dom.getOptionData(option);
  ctx.focusedId = option.id;
  ctx.focusedOptionData = data;
  return data;
}
function setFocus(ctx, option) {
  if (!option || option.id === ctx.focusedId)
    return;
  const data = setHighlight(ctx, option);
  ctx.navigationData = data;
}

export {
  machine
};
