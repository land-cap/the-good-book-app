"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/combobox.connect.ts
var combobox_connect_exports = {};
__export(combobox_connect_exports, {
  connect: () => connect
});
module.exports = __toCommonJS(combobox_connect_exports);
var import_dom_event = require("@zag-js/dom-event");
var import_dom_query2 = require("@zag-js/dom-query");
var import_popper = require("@zag-js/popper");

// src/combobox.anatomy.ts
var import_anatomy = require("@zag-js/anatomy");
var anatomy = (0, import_anatomy.createAnatomy)("combobox").parts(
  "root",
  "label",
  "input",
  "positioner",
  "control",
  "trigger",
  "content",
  "clearTrigger",
  "option",
  "optionGroup"
);
var parts = anatomy.build();

// src/combobox.dom.ts
var import_dom_query = require("@zag-js/dom-query");
var import_utils = require("@zag-js/utils");
var dom = (0, import_dom_query.createScope)({
  getRootId: (ctx) => ctx.ids?.root ?? `combobox:${ctx.id}`,
  getLabelId: (ctx) => ctx.ids?.label ?? `combobox:${ctx.id}:label`,
  getControlId: (ctx) => ctx.ids?.control ?? `combobox:${ctx.id}:control`,
  getInputId: (ctx) => ctx.ids?.input ?? `combobox:${ctx.id}:input`,
  getContentId: (ctx) => ctx.ids?.content ?? `combobox:${ctx.id}:listbox`,
  getPositionerId: (ctx) => `combobox:${ctx.id}:popper`,
  getTriggerId: (ctx) => ctx.ids?.trigger ?? `combobox:${ctx.id}:toggle-btn`,
  getClearTriggerId: (ctx) => ctx.ids?.clearTrigger ?? `combobox:${ctx.id}:clear-btn`,
  getOptionId: (ctx, id, index) => ctx.ids?.option?.(id, index) ?? [`combobox:${ctx.id}:option:${id}`, index].filter((v) => v != null).join(":"),
  getActiveOptionEl: (ctx) => ctx.focusedId ? dom.getById(ctx, ctx.focusedId) : null,
  getContentEl: (ctx) => dom.getById(ctx, dom.getContentId(ctx)),
  getInputEl: (ctx) => dom.getById(ctx, dom.getInputId(ctx)),
  getPositionerEl: (ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),
  getControlEl: (ctx) => dom.getById(ctx, dom.getControlId(ctx)),
  getTriggerEl: (ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),
  getClearTriggerEl: (ctx) => dom.getById(ctx, dom.getClearTriggerId(ctx)),
  getElements: (ctx) => (0, import_dom_query.queryAll)(dom.getContentEl(ctx), "[role=option]:not([aria-disabled=true])"),
  getFocusedOptionEl: (ctx) => {
    if (!ctx.focusedId)
      return null;
    const selector = `[role=option][id=${CSS.escape(ctx.focusedId)}]`;
    return dom.getContentEl(ctx)?.querySelector(selector);
  },
  getFirstEl: (ctx) => (0, import_utils.first)(dom.getElements(ctx)),
  getLastEl: (ctx) => (0, import_utils.last)(dom.getElements(ctx)),
  getPrevEl: (ctx, id) => (0, import_dom_query.prevById)(dom.getElements(ctx), id, ctx.loop),
  getNextEl: (ctx, id) => (0, import_dom_query.nextById)(dom.getElements(ctx), id, ctx.loop),
  isInputFocused: (ctx) => dom.getDoc(ctx).activeElement === dom.getInputEl(ctx),
  getOptionData: (el) => ({
    value: el?.getAttribute("data-value") ?? "",
    label: el?.getAttribute("data-label") ?? ""
  }),
  getOptionCount: (ctx) => {
    const listbox = dom.getContentEl(ctx);
    const count = listbox?.querySelector("[role=option]")?.getAttribute("aria-setsize");
    if (count != null)
      return parseInt(count);
    return listbox?.querySelectorAll("[role=option]").length ?? 0;
  },
  getMatchingOptionEl: (ctx, value) => {
    if (!value)
      return null;
    const selector = `[role=option][data-value="${CSS.escape(value)}"`;
    const listbox = dom.getContentEl(ctx);
    if (!listbox)
      return null;
    return listbox.querySelector(selector);
  },
  focusInput: (ctx) => {
    const input = dom.getInputEl(ctx);
    if (dom.getDoc(ctx).activeElement !== input) {
      input?.focus();
    }
    if (ctx.selectInputOnFocus) {
      input?.select();
    }
  },
  getClosestSectionLabel(ctx) {
    if (!ctx.focusedId)
      return;
    const group = dom.getActiveOptionEl(ctx)?.closest("[data-part=option-group]");
    return group?.getAttribute("aria-label");
  },
  getValueLabel: (ctx, value) => {
    const el = dom.getMatchingOptionEl(ctx, value);
    return dom.getOptionData(el).label;
  }
});

// src/combobox.connect.ts
function connect(state, send, normalize) {
  const translations = state.context.translations;
  const isDisabled = state.context.disabled;
  const isInteractive = state.context.isInteractive;
  const isInvalid = state.context.invalid;
  const isReadOnly = state.context.readOnly;
  const isOpen = state.hasTag("open");
  const isFocused = state.hasTag("focused");
  const isIdle = state.hasTag("idle");
  const autofill = isOpen && state.context.navigationData && state.context.autoComplete;
  const showClearButton = (!isIdle || state.context.isHovering) && !state.context.isInputValueEmpty;
  const value = autofill ? state.context.navigationData?.label : state.context.inputValue;
  const popperStyles = (0, import_popper.getPlacementStyles)({
    placement: state.context.currentPlacement
  });
  const api = {
    /**
     * Whether the combobox is focused
     */
    isFocused,
    /**
     * Whether the combobox content or listbox is open
     */
    isOpen,
    /**
     * Whether the combobox input is empty
     */
    isInputValueEmpty: state.context.isInputValueEmpty,
    /**
     * The current value of the combobox input
     */
    inputValue: state.context.inputValue,
    /**
     * The currently focused option (by pointer or keyboard)
     */
    focusedOption: state.context.focusedOptionData,
    /**
     * The currently selected option value
     */
    selectedValue: state.context.selectionData?.value,
    /**
     * Function to set the combobox value
     */
    setValue(value2) {
      let data;
      if (typeof value2 === "string") {
        data = { value: value2, label: dom.getValueLabel(state.context, value2) };
      } else {
        data = value2;
      }
      send({ type: "SET_VALUE", ...data });
    },
    /**
     * Function to set the combobox input value
     */
    setInputValue(value2) {
      send({ type: "SET_INPUT_VALUE", value: value2 });
    },
    /**
     * Function to clear the combobox input value and selected value
     */
    clearValue() {
      send("CLEAR_VALUE");
    },
    /**
     * Function to focus the combobox input
     */
    focus() {
      dom.getInputEl(state.context)?.focus();
    },
    rootProps: normalize.element({
      ...parts.root.attrs,
      id: dom.getRootId(state.context),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      "data-readonly": (0, import_dom_query2.dataAttr)(isReadOnly)
    }),
    labelProps: normalize.label({
      ...parts.label.attrs,
      htmlFor: dom.getInputId(state.context),
      id: dom.getLabelId(state.context),
      "data-readonly": (0, import_dom_query2.dataAttr)(isReadOnly),
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      "data-focus": (0, import_dom_query2.dataAttr)(isFocused)
    }),
    controlProps: normalize.element({
      ...parts.control.attrs,
      id: dom.getControlId(state.context),
      "data-expanded": (0, import_dom_query2.dataAttr)(isOpen),
      "data-focus": (0, import_dom_query2.dataAttr)(isFocused),
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      onPointerOver() {
        if (!isInteractive)
          return;
        send("POINTER_OVER");
      },
      onPointerLeave() {
        if (!isInteractive)
          return;
        send("POINTER_LEAVE");
      }
    }),
    positionerProps: normalize.element({
      ...parts.positioner.attrs,
      id: dom.getPositionerId(state.context),
      "data-expanded": (0, import_dom_query2.dataAttr)(isOpen),
      hidden: !isOpen,
      style: popperStyles.floating
    }),
    inputProps: normalize.input({
      ...parts.input.attrs,
      "aria-invalid": (0, import_dom_query2.ariaAttr)(isInvalid),
      "data-invalid": (0, import_dom_query2.dataAttr)(isInvalid),
      name: state.context.name,
      form: state.context.form,
      disabled: isDisabled,
      autoFocus: state.context.autoFocus,
      autoComplete: "off",
      autoCorrect: "off",
      autoCapitalize: "none",
      spellCheck: "false",
      readOnly: isReadOnly,
      placeholder: state.context.placeholder,
      id: dom.getInputId(state.context),
      type: "text",
      role: "combobox",
      defaultValue: value,
      "data-value": value,
      "aria-autocomplete": state.context.autoComplete ? "both" : "list",
      "aria-controls": isOpen ? dom.getContentId(state.context) : void 0,
      "aria-expanded": isOpen,
      "aria-activedescendant": state.context.focusedId ?? void 0,
      onClick() {
        if (!isInteractive)
          return;
        send("CLICK_INPUT");
      },
      onFocus() {
        if (isDisabled)
          return;
        send("FOCUS");
      },
      onChange(event) {
        const evt = (0, import_dom_event.getNativeEvent)(event);
        if (evt.isComposing)
          return;
        send({ type: "CHANGE", value: event.currentTarget.value });
      },
      onKeyDown(event) {
        if (!isInteractive)
          return;
        const evt = (0, import_dom_event.getNativeEvent)(event);
        if (evt.ctrlKey || evt.shiftKey || evt.isComposing)
          return;
        let prevent = false;
        const keymap = {
          ArrowDown(event2) {
            send(event2.altKey ? "ALT_ARROW_DOWN" : "ARROW_DOWN");
            prevent = true;
          },
          ArrowUp() {
            send(event.altKey ? "ALT_ARROW_UP" : "ARROW_UP");
            prevent = true;
          },
          Home(event2) {
            const isCtrlKey = event2.ctrlKey || event2.metaKey;
            if (isCtrlKey)
              return;
            send({ type: "HOME", preventDefault: () => event2.preventDefault() });
          },
          End(event2) {
            const isCtrlKey = event2.ctrlKey || event2.metaKey;
            if (isCtrlKey)
              return;
            send({ type: "END", preventDefault: () => event2.preventDefault() });
          },
          Enter() {
            send("ENTER");
            prevent = true;
          },
          Escape() {
            send("ESCAPE");
            prevent = true;
          },
          Tab() {
            send("TAB");
          }
        };
        const key = (0, import_dom_event.getEventKey)(event, state.context);
        const exec = keymap[key];
        exec?.(event);
        if (prevent) {
          event.preventDefault();
        }
      }
    }),
    triggerProps: normalize.button({
      ...parts.trigger.attrs,
      id: dom.getTriggerId(state.context),
      "aria-haspopup": "listbox",
      type: "button",
      tabIndex: -1,
      "aria-label": translations.triggerLabel,
      "aria-expanded": isOpen,
      "aria-controls": isOpen ? dom.getContentId(state.context) : void 0,
      disabled: isDisabled,
      "data-readonly": (0, import_dom_query2.dataAttr)(isReadOnly),
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      onPointerDown(event) {
        const evt = (0, import_dom_event.getNativeEvent)(event);
        if (!isInteractive || !(0, import_dom_event.isLeftClick)(evt) || evt.pointerType === "touch")
          return;
        send("CLICK_BUTTON");
        event.preventDefault();
      },
      onPointerUp(event) {
        if (event.pointerType !== "touch")
          return;
        send("CLICK_BUTTON");
      }
    }),
    contentProps: normalize.element({
      ...parts.content.attrs,
      id: dom.getContentId(state.context),
      role: "listbox",
      hidden: !isOpen,
      "aria-labelledby": dom.getLabelId(state.context),
      onPointerDown(event) {
        event.preventDefault();
      }
    }),
    clearTriggerProps: normalize.button({
      ...parts.clearTrigger.attrs,
      id: dom.getClearTriggerId(state.context),
      type: "button",
      tabIndex: -1,
      disabled: isDisabled,
      "aria-label": translations.clearTriggerLabel,
      hidden: !showClearButton,
      onPointerDown(event) {
        const evt = (0, import_dom_event.getNativeEvent)(event);
        if (!isInteractive || !(0, import_dom_event.isLeftClick)(evt))
          return;
        send("CLEAR_VALUE");
        event.preventDefault();
      }
    }),
    getOptionState(props) {
      const { value: value2, index, disabled } = props;
      const id = dom.getOptionId(state.context, value2, index);
      const focused = state.context.focusedId === id;
      const checked = state.context.selectionData?.value === value2;
      return { disabled, focused, checked };
    },
    getOptionProps(props) {
      const { value: value2, label, index, count } = props;
      const id = dom.getOptionId(state.context, value2, index);
      const optionState = api.getOptionState(props);
      return normalize.element({
        ...parts.option.attrs,
        id,
        role: "option",
        tabIndex: -1,
        "data-highlighted": (0, import_dom_query2.dataAttr)(optionState.focused),
        "data-disabled": (0, import_dom_query2.dataAttr)(optionState.disabled),
        "data-checked": (0, import_dom_query2.dataAttr)(optionState.checked),
        "aria-selected": optionState.focused,
        "aria-disabled": optionState.disabled,
        "aria-posinset": count && index != null ? index + 1 : void 0,
        "aria-setsize": count,
        "data-value": value2,
        "data-label": label,
        // Prefer `pointermove` to `pointerenter` to avoid interrupting the keyboard navigation
        // NOTE: for perf, we may want to move these handlers to the listbox
        onPointerMove() {
          if (optionState.disabled)
            return;
          send({ type: "POINTEROVER_OPTION", id, value: value2, label });
        },
        onPointerUp() {
          if (optionState.disabled)
            return;
          send({ type: "CLICK_OPTION", src: "pointerup", id, value: value2, label });
        },
        onClick() {
          if (optionState.disabled)
            return;
          send({ type: "CLICK_OPTION", src: "click", id, value: value2, label });
        },
        onAuxClick(event) {
          if (optionState.disabled)
            return;
          event.preventDefault();
          send({ type: "CLICK_OPTION", src: "auxclick", id, value: value2, label });
        }
      });
    },
    getOptionGroupProps(props) {
      const { label } = props;
      return normalize.element({
        ...parts.optionGroup.attrs,
        role: "group",
        "aria-label": label
      });
    }
  };
  return api;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  connect
});
