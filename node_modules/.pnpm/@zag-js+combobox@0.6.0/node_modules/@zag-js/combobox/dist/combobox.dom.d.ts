import { MachineContext } from './combobox.types.js';
import '@zag-js/core';
import '@zag-js/interact-outside';
import '@zag-js/popper';
import '@zag-js/types';

declare const dom: {
    getRootNode: (ctx: {
        getRootNode?: (() => Node | Document | ShadowRoot) | undefined;
    }) => Document | ShadowRoot;
    getDoc: (ctx: {
        getRootNode?: (() => Node | Document | ShadowRoot) | undefined;
    }) => Document;
    getWin: (ctx: {
        getRootNode?: (() => Node | Document | ShadowRoot) | undefined;
    }) => Window & typeof globalThis;
    getActiveElement: (ctx: {
        getRootNode?: (() => Node | Document | ShadowRoot) | undefined;
    }) => HTMLElement | null;
    getById: <T extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | Document | ShadowRoot) | undefined;
    }, id: string) => T | null;
    queryById: <T_1 extends HTMLElement = HTMLElement>(ctx: {
        getRootNode?: (() => Node | Document | ShadowRoot) | undefined;
    }, id: string) => T_1;
} & {
    getRootId: (ctx: MachineContext) => string;
    getLabelId: (ctx: MachineContext) => string;
    getControlId: (ctx: MachineContext) => string;
    getInputId: (ctx: MachineContext) => string;
    getContentId: (ctx: MachineContext) => string;
    getPositionerId: (ctx: MachineContext) => string;
    getTriggerId: (ctx: MachineContext) => string;
    getClearTriggerId: (ctx: MachineContext) => string;
    getOptionId: (ctx: MachineContext, id: string, index?: number) => string;
    getActiveOptionEl: (ctx: MachineContext) => HTMLElement | null;
    getContentEl: (ctx: MachineContext) => HTMLElement | null;
    getInputEl: (ctx: MachineContext) => HTMLInputElement | null;
    getPositionerEl: (ctx: MachineContext) => HTMLElement | null;
    getControlEl: (ctx: MachineContext) => HTMLElement | null;
    getTriggerEl: (ctx: MachineContext) => HTMLElement | null;
    getClearTriggerEl: (ctx: MachineContext) => HTMLElement | null;
    getElements: (ctx: MachineContext) => HTMLElement[];
    getFocusedOptionEl: (ctx: MachineContext) => HTMLElement | null | undefined;
    getFirstEl: (ctx: MachineContext) => HTMLElement | undefined;
    getLastEl: (ctx: MachineContext) => HTMLElement | undefined;
    getPrevEl: (ctx: MachineContext, id: string) => HTMLElement | null;
    getNextEl: (ctx: MachineContext, id: string) => HTMLElement;
    isInputFocused: (ctx: MachineContext) => boolean;
    getOptionData: (el: HTMLElement | null | undefined) => {
        value: string;
        label: string;
    };
    getOptionCount: (ctx: MachineContext) => number;
    getMatchingOptionEl: (ctx: MachineContext, value: string | null | undefined) => HTMLElement | null;
    focusInput: (ctx: MachineContext) => void;
    getClosestSectionLabel(ctx: MachineContext): string | null | undefined;
    getValueLabel: (ctx: MachineContext, value: string) => string;
};

export { dom };
