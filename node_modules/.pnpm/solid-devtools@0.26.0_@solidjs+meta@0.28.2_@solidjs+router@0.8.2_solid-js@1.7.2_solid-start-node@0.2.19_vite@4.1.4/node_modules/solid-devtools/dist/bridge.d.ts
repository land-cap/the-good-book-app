export { Debugger } from '@solid-devtools/debugger/types';

type Versions = {
    client: string;
    expectedClient: string;
    extension: string;
};
interface GeneralMessages {
    SolidOnPage: void;
    ClientConnected: string;
    Versions: Versions;
    /** devtools -> client: the chrome devtools got opened or entirely closed */
    DevtoolsOpened: void;
    DevtoolsClosed: void;
    ResetPanel: void;
}

type PostMessageFn<M extends Record<string, any> = {}> = <K extends keyof (GeneralMessages & M)>(type: K, ..._: void extends (GeneralMessages & M)[K] ? [payload?: (GeneralMessages & M)[K]] : [payload: (GeneralMessages & M)[K]]) => void;
type OnMessageFn<M extends Record<string, any> = {}> = {
    <K extends keyof (GeneralMessages & M)>(name: K, handler: (payload: (GeneralMessages & M)[K]) => void): VoidFunction;
    <K extends keyof (GeneralMessages & M)>(handler: (e: {
        name: K;
        details: (GeneralMessages & M)[K];
    }) => void): VoidFunction;
};
declare const makePostMessage: <M extends Record<string, any>>() => PostMessageFn<M>;
/**
 * Important ot call this if you want to use
 */
declare function startListeningWindowMessages(): void;
declare function makeMessageListener<M extends Record<string, any>>(): OnMessageFn<M>;
type ForwardPayload = {
    forwarding: true;
    name: string;
    details: any;
};
declare const isForwardMessage: (data: any) => data is ForwardPayload;
declare const forwardMessageToWindow: (message: ForwardPayload) => void;
declare function once<M extends Record<string, any>, K extends keyof (GeneralMessages & M)>(method: OnMessageFn<M>, name: K, handler: (details: (GeneralMessages & M)[K]) => void): VoidFunction;

export { ForwardPayload, GeneralMessages, OnMessageFn, PostMessageFn, Versions, forwardMessageToWindow, isForwardMessage, makeMessageListener, makePostMessage, once, startListeningWindowMessages };
