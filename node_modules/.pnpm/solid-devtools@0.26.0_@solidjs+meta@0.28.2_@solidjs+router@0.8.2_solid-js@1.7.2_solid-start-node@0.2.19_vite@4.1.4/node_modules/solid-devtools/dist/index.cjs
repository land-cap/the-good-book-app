'use strict';

var _debugger = require('@solid-devtools/debugger');
var solidJs = require('solid-js');

// src/index.ts

// src/bridge.ts
var makePostMessage = () => (name, details) => postMessage({ name, details }, "*");
var listeners = {};
function startListeningWindowMessages() {
  if (typeof window === "undefined")
    return;
  addEventListener("message", (event) => {
    const name = event.data?.name;
    if (typeof name !== "string")
      return;
    const arr = listeners[name];
    if (arr)
      arr.forEach((f) => f(event.data.details));
    const arr2 = listeners["*"];
    if (arr2)
      arr2.forEach((f) => f({ name, details: event.data.details }));
  });
}
function makeMessageListener() {
  return (...args) => {
    const name = typeof args[0] === "string" ? args[0] : "*";
    const handler = typeof args[0] === "string" ? args[1] : args[0];
    let arr = listeners[name];
    if (!arr)
      arr = listeners[name] = [];
    arr.push(handler);
    return () => listeners[name] = arr.filter((l) => l !== handler);
  };
}

// src/client.ts
startListeningWindowMessages();
var _fromContent = makeMessageListener();
var fromContent = (...args) => solidJs.onCleanup(_fromContent(...args));
var toContent = makePostMessage();
toContent("ResetPanel");
toContent("ClientConnected", "0.26.0");
var loadedBefore = false;
_debugger.createInternalRoot(() => {
  const debug = _debugger.useDebugger();
  fromContent("DevtoolsOpened", () => debug.toggleEnabled(true));
  fromContent("DevtoolsClosed", () => debug.toggleEnabled(false));
  solidJs.createEffect(() => {
    if (!debug.enabled())
      return;
    if (loadedBefore)
      debug.emit("ResetState");
    else
      loadedBefore = true;
    fromContent((e) => debug.emit(e.name, e.details));
    debug.listen((e) => toContent(e.name, e.details));
  });
});
_debugger.enableRootsAutoattach();

Object.defineProperty(exports, 'Debugger', {
  enumerable: true,
  get: function () { return _debugger.Debugger; }
});
Object.defineProperty(exports, 'attachDebugger', {
  enumerable: true,
  get: function () { return _debugger.attachDebugger; }
});
Object.defineProperty(exports, 'makeSolidUpdateListener', {
  enumerable: true,
  get: function () { return _debugger.makeSolidUpdateListener; }
});
Object.defineProperty(exports, 'markComponentLoc', {
  enumerable: true,
  get: function () { return _debugger.markComponentLoc; }
});
Object.defineProperty(exports, 'useDebugger', {
  enumerable: true,
  get: function () { return _debugger.useDebugger; }
});
Object.defineProperty(exports, 'useLocator', {
  enumerable: true,
  get: function () { return _debugger.useLocator; }
});
