// src/bridge.ts
var makePostMessage = () => (name, details) => postMessage({ name, details }, "*");
var listeners = {};
function startListeningWindowMessages() {
  if (typeof window === "undefined")
    return;
  addEventListener("message", (event) => {
    const name = event.data?.name;
    if (typeof name !== "string")
      return;
    const arr = listeners[name];
    if (arr)
      arr.forEach((f) => f(event.data.details));
    const arr2 = listeners["*"];
    if (arr2)
      arr2.forEach((f) => f({ name, details: event.data.details }));
  });
}
function makeMessageListener() {
  return (...args) => {
    const name = typeof args[0] === "string" ? args[0] : "*";
    const handler = typeof args[0] === "string" ? args[1] : args[0];
    let arr = listeners[name];
    if (!arr)
      arr = listeners[name] = [];
    arr.push(handler);
    return () => listeners[name] = arr.filter((l) => l !== handler);
  };
}
var isForwardMessage = (data) => typeof data === "object" && data !== null && data.forwarding === true && "name" in data;
var forwardMessageToWindow = (message) => {
  postMessage({ name: message.name, details: message.details }, "*");
};
function once(method, name, handler) {
  const unsub = method(name, (...cbArgs) => {
    unsub();
    return handler(...cbArgs);
  });
  return unsub;
}

export { forwardMessageToWindow, isForwardMessage, makeMessageListener, makePostMessage, once, startListeningWindowMessages };
