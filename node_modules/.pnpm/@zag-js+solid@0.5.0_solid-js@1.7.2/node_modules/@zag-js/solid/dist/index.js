"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  deepMerge: () => import_core.deepMerge,
  mergeProps: () => import_core.mergeProps,
  normalizeProps: () => normalizeProps,
  useActor: () => useActor,
  useMachine: () => useMachine,
  useService: () => useService
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@zag-js/core");

// src/normalize-props.ts
var import_types = require("@zag-js/types");

// ../../utilities/core/src/guard.ts
var isArray = (v) => Array.isArray(v);
var isObject = (v) => !(v == null || typeof v !== "object" || isArray(v));
var isNumber = (v) => typeof v === "number" && !Number.isNaN(v);
var isString = (v) => typeof v === "string";

// src/cssify.ts
var import_hyphenate_style_name = __toESM(require("hyphenate-style-name"));
var format = (v) => v.startsWith("--") ? v : (0, import_hyphenate_style_name.default)(v);
function cssify(style) {
  let css = {};
  for (const property in style) {
    const value = style[property];
    if (!isString(value) && !isNumber(value))
      continue;
    css[format(property)] = value;
  }
  return css;
}

// src/normalize-props.ts
var eventMap = {
  onFocus: "onFocusIn",
  onBlur: "onFocusOut",
  onDoubleClick: "onDblClick",
  onChange: "onInput",
  defaultChecked: "checked",
  defaultValue: "value",
  htmlFor: "for",
  className: "class"
};
function toSolidProp(prop) {
  return prop in eventMap ? eventMap[prop] : prop;
}
var normalizeProps = (0, import_types.createNormalizer)((props) => {
  const normalized = {};
  for (const key in props) {
    const value = props[key];
    if (key === "style" && isObject(value)) {
      normalized["style"] = cssify(value);
      continue;
    }
    if (key === "children") {
      if (isString(value)) {
        normalized["textContent"] = value;
      }
      continue;
    }
    normalized[toSolidProp(key)] = value;
  }
  return normalized;
});

// src/use-actor.ts
var import_solid_js = require("solid-js");
var import_store = require("solid-js/store");
function useActor(service) {
  const [state, setState] = (0, import_store.createStore)(service.getState());
  (0, import_solid_js.onMount)(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState((0, import_store.reconcile)(nextState));
    });
    (0, import_solid_js.onCleanup)(() => {
      unsubscribe();
    });
  });
  return [state, service.send];
}

// src/use-machine.ts
var import_solid_js2 = require("solid-js");
var import_store2 = require("solid-js/store");
function useService(machine, options) {
  const { actions, state: hydratedState, context } = options ?? {};
  const service = (() => {
    const _machine = typeof machine === "function" ? machine() : machine;
    const contextValue = typeof context === "function" ? context() : context;
    return contextValue ? _machine.withContext(contextValue) : _machine;
  })();
  (0, import_solid_js2.onMount)(() => {
    service.start(hydratedState);
    if (service.state.can("SETUP")) {
      service.send("SETUP");
    }
    (0, import_solid_js2.onCleanup)(() => {
      service.stop();
    });
  });
  (0, import_solid_js2.createEffect)(() => {
    const contextValue = typeof context === "function" ? context() : context;
    service.setContext(contextValue);
  });
  (0, import_solid_js2.createEffect)(() => {
    service.setOptions({ actions });
  });
  return service;
}
function useMachine(machine, options) {
  const service = useService(machine, options);
  const [state, setState] = (0, import_store2.createStore)(service.getState());
  (0, import_solid_js2.onMount)(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState((0, import_store2.reconcile)(nextState));
    });
    (0, import_solid_js2.onCleanup)(() => {
      unsubscribe();
    });
  });
  return [state, service.send, service];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  deepMerge,
  mergeProps,
  normalizeProps,
  useActor,
  useMachine,
  useService
});
