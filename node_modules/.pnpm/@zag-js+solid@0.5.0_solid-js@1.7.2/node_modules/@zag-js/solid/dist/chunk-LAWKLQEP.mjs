// src/use-machine.ts
import { createEffect, onCleanup, onMount } from "solid-js";
import { createStore, reconcile } from "solid-js/store";
function useService(machine, options) {
  const { actions, state: hydratedState, context } = options ?? {};
  const service = (() => {
    const _machine = typeof machine === "function" ? machine() : machine;
    const contextValue = typeof context === "function" ? context() : context;
    return contextValue ? _machine.withContext(contextValue) : _machine;
  })();
  onMount(() => {
    service.start(hydratedState);
    if (service.state.can("SETUP")) {
      service.send("SETUP");
    }
    onCleanup(() => {
      service.stop();
    });
  });
  createEffect(() => {
    const contextValue = typeof context === "function" ? context() : context;
    service.setContext(contextValue);
  });
  createEffect(() => {
    service.setOptions({ actions });
  });
  return service;
}
function useMachine(machine, options) {
  const service = useService(machine, options);
  const [state, setState] = createStore(service.getState());
  onMount(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState(reconcile(nextState));
    });
    onCleanup(() => {
      unsubscribe();
    });
  });
  return [state, service.send, service];
}

export {
  useService,
  useMachine
};
