"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/point-value.ts
var point_value_exports = {};
__export(point_value_exports, {
  getRelativePointPercent: () => getRelativePointPercent,
  getRelativePointValue: () => getRelativePointValue
});
module.exports = __toCommonJS(point_value_exports);

// src/get-element-offset.ts
function getElementOffset(element) {
  let left = 0;
  let top = 0;
  let el = element;
  if (el.parentNode) {
    do {
      left += el.offsetLeft;
      top += el.offsetTop;
    } while ((el = el.offsetParent) && el.nodeType < 9);
    el = element;
    do {
      left -= el.scrollLeft;
      top -= el.scrollTop;
    } while ((el = el.parentNode) && !/body/i.test(el.nodeName));
  }
  return {
    top,
    right: innerWidth - left - element.offsetWidth,
    bottom: innerHeight - top - element.offsetHeight,
    left
  };
}

// src/point-value.ts
var clamp = (value) => Math.max(0, Math.min(1, value));
function getRelativePointValue(absolutePoint, element) {
  const offset = getElementOffset(element);
  const x = absolutePoint.x - offset.left;
  const y = absolutePoint.y - offset.top;
  return {
    x,
    y,
    getDelta(origin) {
      return { x: x - origin.x, y: y - origin.y };
    }
  };
}
function getRelativePointPercent(absolutePoint, element) {
  const relativePoint = getRelativePointValue(absolutePoint, element);
  const x = clamp(relativePoint.x / element.offsetWidth);
  const y = clamp(relativePoint.y / element.offsetHeight);
  return {
    x,
    y,
    normalize(options = {}) {
      const { dir = "ltr", orientation = "horizontal" } = options;
      let newX = x;
      if (orientation === "horizontal" && dir === "rtl")
        newX = 1 - newX;
      return orientation === "horizontal" ? newX : y;
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getRelativePointPercent,
  getRelativePointValue
});
