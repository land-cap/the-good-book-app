"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/pressable.utils.ts
var pressable_utils_exports = {};
__export(pressable_utils_exports, {
  areRectanglesOverlapping: () => areRectanglesOverlapping,
  getPointClientRect: () => getPointClientRect,
  isHTMLAnchorLink: () => isHTMLAnchorLink,
  isOverTarget: () => isOverTarget,
  isValidKeyboardEvent: () => isValidKeyboardEvent,
  shouldPreventDefault: () => shouldPreventDefault,
  shouldPreventDefaultKeyboard: () => shouldPreventDefaultKeyboard
});
module.exports = __toCommonJS(pressable_utils_exports);
var import_dom_query = require("@zag-js/dom-query");
function isValidKeyboardEvent(event) {
  const { key, target } = event;
  const element = target;
  const { tagName, isContentEditable } = element;
  const role = element.getAttribute("role");
  if (tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable)
    return false;
  return (key === "Enter" || key === " ") && // A link with a valid href should be handled natively,
  // unless it also has role='button' and was triggered using Space.
  (!isHTMLAnchorLink(element) || role === "button" && key !== "Enter") && // An element with role='link' should only trigger with Enter key
  !(role === "link" && key !== "Enter");
}
function isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function shouldPreventDefaultKeyboard(target) {
  return !((target.tagName === "INPUT" || target.tagName === "BUTTON") && target.type === "submit");
}
function shouldPreventDefault(target) {
  return !(0, import_dom_query.isHTMLElement)(target) || !target.draggable;
}
function isOverTarget(point, target) {
  if (!target)
    return;
  let rect = target.getBoundingClientRect();
  let pointRect = getPointClientRect(point);
  return areRectanglesOverlapping(rect, pointRect);
}
function getPointClientRect(point) {
  let offsetX = point.width ? point.width / 2 : point.radiusX || 0;
  let offsetY = point.height ? point.height / 2 : point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function areRectanglesOverlapping(a, b) {
  if (a.left > b.right || b.left > a.right) {
    return false;
  }
  if (a.top > b.bottom || b.top > a.bottom) {
    return false;
  }
  return true;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  areRectanglesOverlapping,
  getPointClientRect,
  isHTMLAnchorLink,
  isOverTarget,
  isValidKeyboardEvent,
  shouldPreventDefault,
  shouldPreventDefaultKeyboard
});
