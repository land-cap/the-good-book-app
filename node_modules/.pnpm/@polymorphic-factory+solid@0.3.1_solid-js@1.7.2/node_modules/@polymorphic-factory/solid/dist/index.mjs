// src/polymorphic-factory.tsx
import { createComponent as _$createComponent } from "solid-js/web";
import { mergeProps as _$mergeProps } from "solid-js/web";
import { splitProps } from "solid-js";
import { Dynamic } from "solid-js/web";
function defaultStyled(originalComponent) {
  return (props) => {
    const [local, others] = splitProps(props, ["as"]);
    const component = local.as || originalComponent;
    return _$createComponent(Dynamic, _$mergeProps({
      component
    }, others));
  };
}
function polymorphicFactory({
  styled = defaultStyled
} = {}) {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled, {
    /**
     * @example
     * const Div = poly("div")
     * const WithPoly = poly(AnotherComponent)
     */
    apply(target, thisArg, argArray) {
      return styled(...argArray);
    },
    /**
     * @example
     * <poly.div />
     */
    get(_, element) {
      const asElement = element;
      if (!cache.has(asElement)) {
        cache.set(asElement, styled(asElement));
      }
      return cache.get(asElement);
    }
  });
}
export {
  polymorphicFactory
};
