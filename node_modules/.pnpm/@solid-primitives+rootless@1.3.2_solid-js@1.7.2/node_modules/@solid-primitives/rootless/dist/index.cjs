'use strict';

var solidJs = require('solid-js');
var web = require('solid-js/web');
var utils = require('@solid-primitives/utils');

// src/index.ts
function createSubRoot(fn, ...owners) {
  if (owners.length === 0)
    owners = [solidJs.getOwner()];
  return solidJs.createRoot((dispose) => {
    utils.asArray(utils.access(owners)).forEach(
      (owner) => owner && solidJs.runWithOwner(owner, solidJs.onCleanup.bind(void 0, dispose))
    );
    return fn(dispose);
  }, owners[0]);
}
exports.createBranch = createSubRoot;
exports.createCallback = (callback, owner = solidJs.getOwner()) => owner ? (...args) => solidJs.runWithOwner(owner, () => callback(...args)) : callback;
function createDisposable(fn, ...owners) {
  return createSubRoot((dispose) => {
    fn(dispose);
    return dispose;
  }, ...owners);
}
function createSingletonRoot(factory, detachedOwner = solidJs.getOwner()) {
  let listeners = 0, value, disposeRoot;
  return () => {
    listeners++;
    solidJs.onCleanup(() => {
      listeners--;
      queueMicrotask(() => {
        if (!listeners && disposeRoot) {
          disposeRoot();
          disposeRoot = value = void 0;
        }
      });
    });
    if (!disposeRoot) {
      solidJs.createRoot((dispose) => value = factory(disposeRoot = dispose), detachedOwner);
    }
    return value;
  };
}
exports.createSharedRoot = createSingletonRoot;
function createHydratableSingletonRoot(factory) {
  const owner = solidJs.getOwner();
  const singleton = createSingletonRoot(factory, owner);
  return () => web.isServer || solidJs.sharedConfig.context ? solidJs.createRoot(factory, owner) : singleton();
}

exports.createDisposable = createDisposable;
exports.createHydratableSingletonRoot = createHydratableSingletonRoot;
exports.createSingletonRoot = createSingletonRoot;
exports.createSubRoot = createSubRoot;
