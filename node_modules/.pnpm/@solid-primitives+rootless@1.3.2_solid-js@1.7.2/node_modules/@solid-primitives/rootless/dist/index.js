import { getOwner, createRoot, runWithOwner, onCleanup, sharedConfig } from 'solid-js';
import { isServer } from 'solid-js/web';
import { asArray, access } from '@solid-primitives/utils';

// src/index.ts
function createSubRoot(fn, ...owners) {
  if (owners.length === 0)
    owners = [getOwner()];
  return createRoot((dispose) => {
    asArray(access(owners)).forEach(
      (owner) => owner && runWithOwner(owner, onCleanup.bind(void 0, dispose))
    );
    return fn(dispose);
  }, owners[0]);
}
var createBranch = createSubRoot;
var createCallback = (callback, owner = getOwner()) => owner ? (...args) => runWithOwner(owner, () => callback(...args)) : callback;
function createDisposable(fn, ...owners) {
  return createSubRoot((dispose) => {
    fn(dispose);
    return dispose;
  }, ...owners);
}
function createSingletonRoot(factory, detachedOwner = getOwner()) {
  let listeners = 0, value, disposeRoot;
  return () => {
    listeners++;
    onCleanup(() => {
      listeners--;
      queueMicrotask(() => {
        if (!listeners && disposeRoot) {
          disposeRoot();
          disposeRoot = value = void 0;
        }
      });
    });
    if (!disposeRoot) {
      createRoot((dispose) => value = factory(disposeRoot = dispose), detachedOwner);
    }
    return value;
  };
}
var createSharedRoot = createSingletonRoot;
function createHydratableSingletonRoot(factory) {
  const owner = getOwner();
  const singleton = createSingletonRoot(factory, owner);
  return () => isServer || sharedConfig.context ? createRoot(factory, owner) : singleton();
}

export { createBranch, createCallback, createDisposable, createHydratableSingletonRoot, createSharedRoot, createSingletonRoot, createSubRoot };
