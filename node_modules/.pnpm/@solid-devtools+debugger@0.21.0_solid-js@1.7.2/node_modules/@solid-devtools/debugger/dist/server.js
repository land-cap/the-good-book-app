export { DEFAULT_MAIN_VIEW, DEFAULT_WALKER_MODE, DebuggerModule, DevtoolsMainView, INFINITY, LOCATION_ATTRIBUTE_NAME, MARK_COMPONENT, NAN, NEGATIVE_INFINITY, NODE_TYPE_NAMES, NodeType, PropGetterState, TreeWalkerMode, UNDEFINED, USE_LOCATOR, ValueItemType, ValueType, WINDOW_PROJECTPATH_PROPERTY, getValueItemId } from './chunk-4JABOMAE.js';

// src/server.ts
var Debugger = (props) => props.children;
var attachDebugger = () => void 0;
var useDebugger = () => new Proxy(
  {},
  {
    get() {
      throw new Error("Debugger is not available in production/server environment.");
    }
  }
);
var enableRootsAutoattach = () => void 0;
var useLocator = () => void 0;
var unobserveAllRoots = () => void 0;
var makeSolidUpdateListener = () => () => void 0;
var interceptComputationRerun = () => void 0;
var observeValueUpdate = () => void 0;
var makeValueUpdateListener = () => void 0;
var removeValueUpdateObserver = () => void 0;
var markComponentLoc = () => void 0;
var getOwner = () => null;
var getOwnerType = () => "computation" /* Computation */;
var getNodeType = () => "computation" /* Computation */;
var getNodeName = () => "(unnamed)";
var isSolidComputation = (o) => false;
var isSolidMemo = (o) => false;
var isSolidOwner = (o) => false;
var isSolidRoot = (o) => false;
var isSolidStore = (o) => false;
var onOwnerCleanup = () => () => void 0;
var onParentCleanup = () => () => void 0;
var getFunctionSources = () => [];
var createInternalRoot = (fn) => fn(() => {
});
var lookupOwner = () => null;

export { Debugger, attachDebugger, createInternalRoot, enableRootsAutoattach, getFunctionSources, getNodeName, getNodeType, getOwner, getOwnerType, interceptComputationRerun, isSolidComputation, isSolidMemo, isSolidOwner, isSolidRoot, isSolidStore, lookupOwner, makeSolidUpdateListener, makeValueUpdateListener, markComponentLoc, observeValueUpdate, onOwnerCleanup, onParentCleanup, removeValueUpdateObserver, unobserveAllRoots, useDebugger, useLocator };
