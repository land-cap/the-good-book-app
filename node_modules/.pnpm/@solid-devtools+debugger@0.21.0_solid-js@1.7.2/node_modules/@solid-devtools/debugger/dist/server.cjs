'use strict';

// src/main/constants.ts
var DevtoolsMainView = /* @__PURE__ */ ((DevtoolsMainView2) => {
  DevtoolsMainView2["Structure"] = "structure";
  return DevtoolsMainView2;
})(DevtoolsMainView || {});
var DEFAULT_MAIN_VIEW = "structure" /* Structure */;
var DebuggerModule = /* @__PURE__ */ ((DebuggerModule2) => {
  DebuggerModule2["Locator"] = "locator";
  DebuggerModule2["Structure"] = "structure";
  DebuggerModule2["Dgraph"] = "dgraph";
  return DebuggerModule2;
})(DebuggerModule || {});
var TreeWalkerMode = /* @__PURE__ */ ((TreeWalkerMode2) => {
  TreeWalkerMode2["Owners"] = "owners";
  TreeWalkerMode2["Components"] = "components";
  TreeWalkerMode2["DOM"] = "dom";
  return TreeWalkerMode2;
})(TreeWalkerMode || {});
var DEFAULT_WALKER_MODE = "components" /* Components */;
var NodeType = /* @__PURE__ */ ((NodeType2) => {
  NodeType2["Root"] = "root";
  NodeType2["Component"] = "component";
  NodeType2["Element"] = "element";
  NodeType2["Effect"] = "effect";
  NodeType2["Render"] = "render";
  NodeType2["Memo"] = "memo";
  NodeType2["Computation"] = "computation";
  NodeType2["Refresh"] = "refresh";
  NodeType2["Context"] = "context";
  NodeType2["Signal"] = "signal";
  NodeType2["Store"] = "store";
  return NodeType2;
})(NodeType || {});
var NODE_TYPE_NAMES = {
  ["root" /* Root */]: "Root",
  ["component" /* Component */]: "Component",
  ["element" /* Element */]: "Element",
  ["effect" /* Effect */]: "Effect",
  ["render" /* Render */]: "Render Effect",
  ["memo" /* Memo */]: "Memo",
  ["computation" /* Computation */]: "Computation",
  ["refresh" /* Refresh */]: "Refresh",
  ["context" /* Context */]: "Context",
  ["signal" /* Signal */]: "Signal",
  ["store" /* Store */]: "Store"
};
var ValueItemType = /* @__PURE__ */ ((ValueItemType2) => {
  ValueItemType2["Signal"] = "signal";
  ValueItemType2["Prop"] = "prop";
  ValueItemType2["Value"] = "value";
  return ValueItemType2;
})(ValueItemType || {});

// src/inspector/types.ts
var INFINITY = "Infinity";
var NEGATIVE_INFINITY = "NegativeInfinity";
var NAN = "NaN";
var UNDEFINED = "undefined";
var ValueType = /* @__PURE__ */ ((ValueType2) => {
  ValueType2["Number"] = "number";
  ValueType2["Boolean"] = "boolean";
  ValueType2["String"] = "string";
  ValueType2["Null"] = "null";
  ValueType2["Symbol"] = "symbol";
  ValueType2["Array"] = "array";
  ValueType2["Object"] = "object";
  ValueType2["Function"] = "function";
  ValueType2["Getter"] = "getter";
  ValueType2["Element"] = "element";
  ValueType2["Instance"] = "instance";
  ValueType2["Store"] = "store";
  ValueType2["Unknown"] = "unknown";
  return ValueType2;
})(ValueType || {});
var PropGetterState = /* @__PURE__ */ ((PropGetterState2) => {
  PropGetterState2["Live"] = "live";
  PropGetterState2["Stale"] = "stale";
  return PropGetterState2;
})(PropGetterState || {});

// src/locator/types.ts
var WINDOW_PROJECTPATH_PROPERTY = "$sdt_projectPath";
var LOCATION_ATTRIBUTE_NAME = "data-source-loc";
var MARK_COMPONENT = `markComponentLoc`;
var USE_LOCATOR = `useLocator`;

// src/main/types.ts
var getValueItemId = (type, id) => {
  if (type === "value" /* Value */)
    return "value" /* Value */;
  return `${type}:${id}`;
};

// src/server.ts
var Debugger = (props) => props.children;
var attachDebugger = () => void 0;
var useDebugger = () => new Proxy(
  {},
  {
    get() {
      throw new Error("Debugger is not available in production/server environment.");
    }
  }
);
var enableRootsAutoattach = () => void 0;
var useLocator = () => void 0;
var unobserveAllRoots = () => void 0;
var makeSolidUpdateListener = () => () => void 0;
var interceptComputationRerun = () => void 0;
var observeValueUpdate = () => void 0;
var makeValueUpdateListener = () => void 0;
var removeValueUpdateObserver = () => void 0;
var markComponentLoc = () => void 0;
var getOwner = () => null;
var getOwnerType = () => "computation" /* Computation */;
var getNodeType = () => "computation" /* Computation */;
var getNodeName = () => "(unnamed)";
var isSolidComputation = (o) => false;
var isSolidMemo = (o) => false;
var isSolidOwner = (o) => false;
var isSolidRoot = (o) => false;
var isSolidStore = (o) => false;
var onOwnerCleanup = () => () => void 0;
var onParentCleanup = () => () => void 0;
var getFunctionSources = () => [];
var createInternalRoot = (fn) => fn(() => {
});
var lookupOwner = () => null;

exports.DEFAULT_MAIN_VIEW = DEFAULT_MAIN_VIEW;
exports.DEFAULT_WALKER_MODE = DEFAULT_WALKER_MODE;
exports.Debugger = Debugger;
exports.DebuggerModule = DebuggerModule;
exports.DevtoolsMainView = DevtoolsMainView;
exports.INFINITY = INFINITY;
exports.LOCATION_ATTRIBUTE_NAME = LOCATION_ATTRIBUTE_NAME;
exports.MARK_COMPONENT = MARK_COMPONENT;
exports.NAN = NAN;
exports.NEGATIVE_INFINITY = NEGATIVE_INFINITY;
exports.NODE_TYPE_NAMES = NODE_TYPE_NAMES;
exports.NodeType = NodeType;
exports.PropGetterState = PropGetterState;
exports.TreeWalkerMode = TreeWalkerMode;
exports.UNDEFINED = UNDEFINED;
exports.USE_LOCATOR = USE_LOCATOR;
exports.ValueItemType = ValueItemType;
exports.ValueType = ValueType;
exports.WINDOW_PROJECTPATH_PROPERTY = WINDOW_PROJECTPATH_PROPERTY;
exports.attachDebugger = attachDebugger;
exports.createInternalRoot = createInternalRoot;
exports.enableRootsAutoattach = enableRootsAutoattach;
exports.getFunctionSources = getFunctionSources;
exports.getNodeName = getNodeName;
exports.getNodeType = getNodeType;
exports.getOwner = getOwner;
exports.getOwnerType = getOwnerType;
exports.getValueItemId = getValueItemId;
exports.interceptComputationRerun = interceptComputationRerun;
exports.isSolidComputation = isSolidComputation;
exports.isSolidMemo = isSolidMemo;
exports.isSolidOwner = isSolidOwner;
exports.isSolidRoot = isSolidRoot;
exports.isSolidStore = isSolidStore;
exports.lookupOwner = lookupOwner;
exports.makeSolidUpdateListener = makeSolidUpdateListener;
exports.makeValueUpdateListener = makeValueUpdateListener;
exports.markComponentLoc = markComponentLoc;
exports.observeValueUpdate = observeValueUpdate;
exports.onOwnerCleanup = onOwnerCleanup;
exports.onParentCleanup = onParentCleanup;
exports.removeValueUpdateObserver = removeValueUpdateObserver;
exports.unobserveAllRoots = unobserveAllRoots;
exports.useDebugger = useDebugger;
exports.useLocator = useLocator;
