"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/auto-update.ts
var auto_update_exports = {};
__export(auto_update_exports, {
  autoUpdate: () => autoUpdate
});
module.exports = __toCommonJS(auto_update_exports);
var import_dom = require("@floating-ui/dom");
var import_element_rect = require("@zag-js/element-rect");
var callAll = (...fns) => () => fns.forEach((fn) => fn());
var isHTMLElement = (el) => {
  return typeof el === "object" && el !== null && el.nodeType === 1;
};
var addDomEvent = (el, type, fn, options) => {
  el.addEventListener(type, fn, options);
  return () => el.removeEventListener(type, fn, options);
};
function resolveOptions(option) {
  const bool = typeof option === "boolean";
  return {
    ancestorResize: bool ? option : option.ancestorResize ?? true,
    ancestorScroll: bool ? option : option.ancestorScroll ?? true,
    referenceResize: bool ? option : option.referenceResize ?? true
  };
}
function autoUpdate(reference, floating, update, options = false) {
  const { ancestorScroll, ancestorResize, referenceResize } = resolveOptions(options);
  const useAncestors = ancestorScroll || ancestorResize;
  const ancestors = [];
  if (useAncestors && isHTMLElement(reference)) {
    ancestors.push(...(0, import_dom.getOverflowAncestors)(reference));
  }
  function addResizeListeners() {
    let cleanups = [(0, import_element_rect.trackElementRect)(floating, update, { scope: "size" })];
    if (referenceResize && isHTMLElement(reference)) {
      cleanups.push((0, import_element_rect.trackElementRect)(reference, update));
    }
    cleanups.push(callAll(...ancestors.map((el) => addDomEvent(el, "resize", update))));
    return () => cleanups.forEach((fn) => fn());
  }
  function addScrollListeners() {
    return callAll(...ancestors.map((el) => addDomEvent(el, "scroll", update, { passive: true })));
  }
  return callAll(addResizeListeners(), addScrollListeners());
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  autoUpdate
});
