// src/auto-update.ts
import { getOverflowAncestors } from "@floating-ui/dom";
import { trackElementRect } from "@zag-js/element-rect";
var callAll = (...fns) => () => fns.forEach((fn) => fn());
var isHTMLElement = (el) => {
  return typeof el === "object" && el !== null && el.nodeType === 1;
};
var addDomEvent = (el, type, fn, options) => {
  el.addEventListener(type, fn, options);
  return () => el.removeEventListener(type, fn, options);
};
function resolveOptions(option) {
  const bool = typeof option === "boolean";
  return {
    ancestorResize: bool ? option : option.ancestorResize ?? true,
    ancestorScroll: bool ? option : option.ancestorScroll ?? true,
    referenceResize: bool ? option : option.referenceResize ?? true
  };
}
function autoUpdate(reference, floating, update, options = false) {
  const { ancestorScroll, ancestorResize, referenceResize } = resolveOptions(options);
  const useAncestors = ancestorScroll || ancestorResize;
  const ancestors = [];
  if (useAncestors && isHTMLElement(reference)) {
    ancestors.push(...getOverflowAncestors(reference));
  }
  function addResizeListeners() {
    let cleanups = [trackElementRect(floating, update, { scope: "size" })];
    if (referenceResize && isHTMLElement(reference)) {
      cleanups.push(trackElementRect(reference, update));
    }
    cleanups.push(callAll(...ancestors.map((el) => addDomEvent(el, "resize", update))));
    return () => cleanups.forEach((fn) => fn());
  }
  function addScrollListeners() {
    return callAll(...ancestors.map((el) => addDomEvent(el, "scroll", update, { passive: true })));
  }
  return callAll(addResizeListeners(), addScrollListeners());
}

export {
  autoUpdate
};
