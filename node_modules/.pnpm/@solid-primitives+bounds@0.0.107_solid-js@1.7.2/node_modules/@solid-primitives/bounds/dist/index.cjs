'use strict';

var solidJs = require('solid-js');
var utils = require('@solid-primitives/utils');
var resizeObserver = require('@solid-primitives/resize-observer');
var eventListener = require('@solid-primitives/event-listener');

// src/index.ts
var NULLED_BOUNDS = {
  top: null,
  left: null,
  bottom: null,
  right: null,
  width: null,
  height: null
};
function getElementBounds(element) {
  if (!element) {
    return Object.assign({}, NULLED_BOUNDS);
  }
  const rect = element.getBoundingClientRect();
  return {
    top: rect.top,
    left: rect.left,
    bottom: rect.bottom,
    right: rect.right,
    width: rect.width,
    height: rect.height
  };
}
function createElementBounds(target, { trackMutation = true, trackResize = true, trackScroll = true } = {}) {
  const [bounds, setBounds] = utils.createStaticStore(getElementBounds(utils.access(target)));
  const updateBounds = () => setBounds(getElementBounds(utils.access(target)));
  const updateBoundsOf = (el) => setBounds(getElementBounds(el));
  if (typeof target === "function") {
    solidJs.onMount(() => updateBoundsOf(target()));
    solidJs.createComputed(solidJs.on(target, updateBoundsOf, { defer: true }));
  }
  if (trackResize) {
    const resizeHandler = (_, el) => updateBoundsOf(el);
    resizeObserver.createResizeObserver(
      typeof target === "function" ? () => target() || [] : target,
      typeof trackResize === "function" ? trackResize(resizeHandler) : resizeHandler
    );
  }
  if (trackScroll) {
    const scrollHandler = typeof target === "function" ? (e) => {
      const el = target();
      if (el && e.target instanceof Node && e.target.contains(el))
        updateBoundsOf(el);
    } : (e) => {
      if (e.target instanceof Node && e.target.contains(target))
        updateBoundsOf(target);
    };
    eventListener.makeEventListener(
      window,
      "scroll",
      typeof trackScroll === "function" ? trackScroll(scrollHandler) : scrollHandler,
      { capture: true }
    );
  }
  if (trackMutation) {
    const mo = new MutationObserver(
      typeof trackMutation === "function" ? trackMutation(updateBounds) : updateBounds
    );
    mo.observe(document.body, {
      attributeFilter: ["style", "class"],
      subtree: true,
      childList: true
    });
    solidJs.onCleanup(mo.disconnect.bind(mo));
  }
  return bounds;
}

exports.createElementBounds = createElementBounds;
exports.getElementBounds = getElementBounds;
