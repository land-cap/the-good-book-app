{
  "version": 3,
  "sources": ["../../.pnpm/@zag-js+pressable@0.6.0/node_modules/@zag-js/pressable/dist/chunk-3PRYODMI.mjs", "../../.pnpm/@zag-js+pressable@0.6.0/node_modules/@zag-js/pressable/dist/chunk-QIHGLONP.mjs", "../../.pnpm/@zag-js+pressable@0.6.0/node_modules/@zag-js/pressable/dist/chunk-ZQTVPPAF.mjs", "../../.pnpm/@zag-js+pressable@0.6.0/node_modules/@zag-js/pressable/dist/chunk-KJ5WME36.mjs"],
  "sourcesContent": ["// src/pressable.dom.ts\nimport { createScope } from \"@zag-js/dom-query\";\nvar dom = createScope({\n  getPressableId: (ctx) => `pressable:${ctx.id}`,\n  getPressableEl: (ctx) => dom.getById(ctx, dom.getPressableId(ctx))\n});\n\nexport {\n  dom\n};\n", "// src/pressable.utils.ts\nimport { isHTMLElement } from \"@zag-js/dom-query\";\nfunction isValidKeyboardEvent(event) {\n  const { key, target } = event;\n  const element = target;\n  const { tagName, isContentEditable } = element;\n  const role = element.getAttribute(\"role\");\n  if (tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable)\n    return false;\n  return (key === \"Enter\" || key === \" \") && // A link with a valid href should be handled natively,\n  // unless it also has role='button' and was triggered using Space.\n  (!isHTMLAnchorLink(element) || role === \"button\" && key !== \"Enter\") && // An element with role='link' should only trigger with Enter key\n  !(role === \"link\" && key !== \"Enter\");\n}\nfunction isHTMLAnchorLink(target) {\n  return target.tagName === \"A\" && target.hasAttribute(\"href\");\n}\nfunction shouldPreventDefaultKeyboard(target) {\n  return !((target.tagName === \"INPUT\" || target.tagName === \"BUTTON\") && target.type === \"submit\");\n}\nfunction shouldPreventDefault(target) {\n  return !isHTMLElement(target) || !target.draggable;\n}\nfunction isOverTarget(point, target) {\n  if (!target)\n    return;\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\nfunction getPointClientRect(point) {\n  let offsetX = point.width ? point.width / 2 : point.radiusX || 0;\n  let offsetY = point.height ? point.height / 2 : point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction areRectanglesOverlapping(a, b) {\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nexport {\n  isValidKeyboardEvent,\n  isHTMLAnchorLink,\n  shouldPreventDefaultKeyboard,\n  shouldPreventDefault,\n  isOverTarget,\n  getPointClientRect,\n  areRectanglesOverlapping\n};\n", "import {\n  dom\n} from \"./chunk-3PRYODMI.mjs\";\nimport {\n  isValidKeyboardEvent,\n  shouldPreventDefault,\n  shouldPreventDefaultKeyboard\n} from \"./chunk-QIHGLONP.mjs\";\n\n// src/pressable.connect.ts\nimport { getNativeEvent, isVirtualClick, isVirtualPointerEvent } from \"@zag-js/dom-event\";\nimport { contains, dataAttr } from \"@zag-js/dom-query\";\nfunction connect(state, send, normalize) {\n  const isPressed = state.hasTag(\"pressed\");\n  const isDisabled = state.context.disabled;\n  return {\n    /**\n     * Whether the element is pressed.\n     */\n    isPressed,\n    pressableProps: normalize.element({\n      id: dom.getPressableId(state.context),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-pressed\": dataAttr(isPressed),\n      onKeyDown(event) {\n        const evt = getNativeEvent(event);\n        if (!isValidKeyboardEvent(evt))\n          return;\n        if (!contains(event.currentTarget, event.target))\n          return;\n        if (!event.repeat) {\n          send({ type: \"KEY_DOWN\", event, pointerType: \"keyboard\" });\n        }\n        if (shouldPreventDefaultKeyboard(event.target)) {\n          event.preventDefault();\n        }\n      },\n      onKeyUp(event) {\n        const evt = getNativeEvent(event);\n        if (!isValidKeyboardEvent(evt) || event.repeat)\n          return;\n        if (!contains(event.currentTarget, event.target))\n          return;\n        send({ type: \"KEY_UP\", event, pointerType: \"keyboard\" });\n      },\n      onClick(event) {\n        const evt = getNativeEvent(event);\n        if (!contains(event.currentTarget, event.target) || event.button !== 0)\n          return;\n        const ctx = state.context;\n        if (ctx.disabled) {\n          event.preventDefault();\n        }\n        const isVirtual = ctx.pointerType === \"virtual\" || isVirtualClick(evt);\n        if (!ctx.ignoreClickAfterPress && isVirtual) {\n          send({ type: \"CLICK\", event, pointerType: \"virtual\" });\n        }\n      },\n      onPointerDown(event) {\n        if (state.context.disabled) {\n          return;\n        }\n        if (event.button !== 0 || !contains(event.currentTarget, event.target)) {\n          return;\n        }\n        if (shouldPreventDefault(event.currentTarget)) {\n          event.preventDefault();\n        }\n        const evt = getNativeEvent(event);\n        const pointerType = isVirtualPointerEvent(evt) ? \"virtual\" : event.pointerType;\n        send({ type: \"POINTER_DOWN\", event, pointerType });\n      },\n      onMouseDown(event) {\n        if (event.button !== 0)\n          return;\n        if (shouldPreventDefault(event.currentTarget)) {\n          event.preventDefault();\n        }\n      },\n      onDragStart(event) {\n        send({ type: \"DRAG_START\", event });\n      }\n    })\n  };\n}\n\nexport {\n  connect\n};\n", "import {\n  dom\n} from \"./chunk-3PRYODMI.mjs\";\nimport {\n  isHTMLAnchorLink,\n  isOverTarget,\n  isValidKeyboardEvent,\n  shouldPreventDefaultKeyboard\n} from \"./chunk-QIHGLONP.mjs\";\n\n// src/pressable.machine.ts\nimport { createMachine, ref } from \"@zag-js/core\";\nimport { addDomEvent } from \"@zag-js/dom-event\";\nimport { isHTMLElement } from \"@zag-js/dom-query\";\nimport { disableTextSelection, restoreTextSelection } from \"@zag-js/text-selection\";\nimport { compact } from \"@zag-js/utils\";\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine(\n    {\n      id: \"pressable\",\n      initial: \"idle\",\n      context: {\n        ...ctx,\n        ignoreClickAfterPress: false,\n        activePointerId: null,\n        target: null,\n        pointerType: null,\n        pointerdownEvent: null,\n        cleanups: ref([]),\n        wasPressedDown: false\n      },\n      exit: [\"restoreTextSelection\", \"removeDocumentListeners\"],\n      states: {\n        idle: {\n          entry: [\"removeDocumentListeners\", \"resetContext\", \"restoreTextSelection\", \"resetIgnoreClick\"],\n          on: {\n            POINTER_DOWN: [\n              {\n                guard: \"isVirtualPointerEvent\",\n                actions: \"setPointerType\"\n              },\n              {\n                target: \"pressed:in\",\n                actions: [\n                  \"setPressedDown\",\n                  \"setPointerType\",\n                  \"setPointerId\",\n                  \"setTarget\",\n                  \"focusIfNeeded\",\n                  \"disableTextSelection\",\n                  \"invokeOnPressStart\",\n                  \"trackDocumentPointerEvents\"\n                ]\n              }\n            ],\n            KEY_DOWN: {\n              target: \"pressed:in\",\n              actions: [\"setTarget\", \"invokeOnPressStart\", \"trackDocumentKeyup\"]\n            },\n            CLICK: {\n              actions: [\"focusIfNeeded\", \"invokeOnPressStart\", \"invokeOnPressEnd\", \"invokeOnPress\", \"resetIgnoreClick\"]\n            }\n          }\n        },\n        \"pressed:in\": {\n          tags: \"pressed\",\n          entry: \"preventContextMenu\",\n          after: {\n            500: {\n              guard: \"wasPressedDown\",\n              actions: [\"clearPressedDown\", \"invokeOnLongPress\"]\n            }\n          },\n          on: {\n            POINTER_LEAVE: [\n              {\n                guard: \"cancelOnPointerExit\",\n                target: \"idle\",\n                actions: [\"clearPressedDown\", \"invokeOnPressEnd\"]\n              },\n              {\n                target: \"pressed:out\",\n                actions: [\"invokeOnPressEnd\"]\n              }\n            ],\n            DOC_POINTER_UP: [\n              {\n                guard: \"wasPressedDown\",\n                target: \"idle\",\n                actions: [\"clearPressedDown\", \"invokeOnPressUp\", \"invokeOnPressEnd\", \"invokeOnPress\"]\n              },\n              {\n                target: \"idle\",\n                actions: [\"clearPressedDown\", \"invokeOnPressUp\", \"invokeOnPressEnd\"]\n              }\n            ],\n            DOC_KEY_UP: {\n              target: \"idle\",\n              actions: [\"clearPressedDown\", \"invokeOnPressEnd\", \"triggerClick\"]\n            },\n            KEY_UP: {\n              target: \"idle\",\n              actions: [\"clearPressedDown\", \"invokeOnPressUp\"]\n            },\n            DOC_POINTER_CANCEL: { target: \"idle\", actions: \"clearPressedDown\" },\n            DRAG_START: { target: \"idle\", actions: \"clearPressedDown\" }\n          }\n        },\n        \"pressed:out\": {\n          on: {\n            POINTER_ENTER: {\n              target: \"pressed:in\",\n              actions: \"invokeOnPressStart\"\n            },\n            DOC_POINTER_UP: {\n              target: \"idle\"\n            },\n            DOC_POINTER_CANCEL: \"idle\",\n            DRAG_START: \"idle\"\n          }\n        }\n      }\n    },\n    {\n      guards: {\n        isVirtualPointerEvent: (_ctx, evt) => evt.pointerType === \"virtual\",\n        cancelOnPointerExit: (ctx2) => !!ctx2.cancelOnPointerExit,\n        wasPressedDown: (ctx2) => ctx2.wasPressedDown\n      },\n      actions: {\n        trackDocumentPointerEvents(ctx2, _evt, { send }) {\n          const doc = dom.getDoc(ctx2);\n          const onPointerMove = (event) => {\n            if (event.pointerId !== ctx2.activePointerId)\n              return;\n            const isOver = isOverTarget(event, ctx2.target);\n            send({ type: isOver ? \"POINTER_ENTER\" : \"POINTER_LEAVE\", event });\n          };\n          const onPointerUp = (event) => {\n            if (event.pointerId !== ctx2.activePointerId || event.button !== 0)\n              return;\n            send({ type: \"DOC_POINTER_UP\", event });\n          };\n          const onPointerCancel = (event) => {\n            send({ type: \"DOC_POINTER_CANCEL\", event });\n          };\n          const cleanup = [\n            addDomEvent(doc, \"pointermove\", onPointerMove, false),\n            addDomEvent(doc, \"pointerup\", onPointerUp, false),\n            addDomEvent(doc, \"pointercancel\", onPointerCancel, false)\n          ];\n          if (ctx2.pointerType !== \"touch\") {\n            cleanup.push(addDomEvent(doc, \"contextmenu\", onPointerCancel, false));\n          }\n          ctx2.cleanups.push(...cleanup);\n        },\n        trackDocumentKeyup(ctx2, _evt, { send }) {\n          const doc = dom.getDoc(ctx2);\n          const onKeyup = (event) => {\n            if (!isValidKeyboardEvent(event))\n              return;\n            if (shouldPreventDefaultKeyboard(event.target)) {\n              event.preventDefault();\n            }\n            send({ type: \"DOC_KEY_UP\", event });\n          };\n          const cleanup = addDomEvent(doc, \"keyup\", onKeyup, false);\n          ctx2.cleanups.push(cleanup);\n        },\n        removeDocumentListeners(ctx2) {\n          ctx2.cleanups.forEach((fn) => fn?.());\n          ctx2.cleanups = ref([]);\n        },\n        resetContext(ctx2) {\n          ctx2.activePointerId = null;\n          ctx2.pointerType = null;\n          ctx2.pointerdownEvent = null;\n        },\n        restoreTextSelection(ctx2) {\n          if (ctx2.allowTextSelectionOnPress || !ctx2.target)\n            return;\n          restoreTextSelection({ target: ctx2.target, doc: dom.getDoc(ctx2) });\n        },\n        setPointerToVirtual(ctx2) {\n          ctx2.pointerType = \"virtual\";\n        },\n        setPointerType(ctx2, { event }) {\n          ctx2.pointerType = event.pointerType;\n        },\n        setPointerId(ctx2, { event }) {\n          ctx2.activePointerId = event.pointerId;\n          ctx2.pointerdownEvent = ref(event);\n        },\n        setTarget(ctx2, { event }) {\n          ctx2.target = ref(event.currentTarget);\n        },\n        focusIfNeeded(ctx2, { event }) {\n          if (ctx2.disabled || ctx2.preventFocusOnPress)\n            return;\n          event.currentTarget.focus({ preventScroll: true });\n        },\n        invokeOnPressStart(ctx2, evt) {\n          if (ctx2.disabled)\n            return;\n          let { event: originalEvent, pressEvent, pointerType } = evt;\n          const event = pressEvent || originalEvent;\n          ctx2.onPressStart?.({\n            type: \"pressstart\",\n            pointerType: pointerType || ctx2.pointerType,\n            target: event.currentTarget,\n            originalEvent: event\n          });\n        },\n        disableTextSelection(ctx2) {\n          if (!ctx2.target || ctx2.allowTextSelectionOnPress)\n            return;\n          disableTextSelection({ target: ctx2.target, doc: dom.getDoc(ctx2) });\n        },\n        invokeOnPressUp(ctx2, { event, pointerType }) {\n          if (ctx2.disabled)\n            return;\n          ctx2.onPressUp?.({\n            type: \"pressup\",\n            pointerType: pointerType || ctx2.pointerType,\n            target: event.currentTarget,\n            originalEvent: event\n          });\n        },\n        invokeOnPressEnd(ctx2, { event, pointerType }) {\n          ctx2.ignoreClickAfterPress = true;\n          ctx2.onPressEnd?.({\n            type: \"pressend\",\n            pointerType: pointerType || ctx2.pointerType,\n            target: event.currentTarget,\n            originalEvent: event\n          });\n        },\n        invokeOnPress(ctx2, { event, pointerType }) {\n          if (ctx2.disabled)\n            return;\n          ctx2.onPress?.({\n            type: \"press\",\n            pointerType: pointerType || ctx2.pointerType,\n            target: event.currentTarget,\n            originalEvent: event\n          });\n        },\n        triggerClick(ctx2, { event }) {\n          let target = event.target;\n          if (!isHTMLElement(ctx2.target)) {\n            return;\n          }\n          const isAnchor = isHTMLAnchorLink(ctx2.target) || ctx2.target.getAttribute(\"role\") === \"link\";\n          if (ctx2.target.contains(target) && isAnchor) {\n            ctx2.target.click();\n          }\n        },\n        dispatchPointerCancel(ctx2) {\n          if (!ctx2.target)\n            return;\n          const win = dom.getWin(ctx2);\n          const evt = new win.PointerEvent(\"pointercancel\", { bubbles: true });\n          ctx2.target.dispatchEvent(evt);\n        },\n        invokeOnLongPress(ctx2, { pointerType }) {\n          if (!ctx2.target)\n            return;\n          ctx2.onLongPress?.({\n            type: \"longpress\",\n            pointerType: pointerType || ctx2.pointerType,\n            target: ctx2.target,\n            originalEvent: ctx2.pointerdownEvent\n          });\n        },\n        resetIgnoreClick(ctx2) {\n          ctx2.ignoreClickAfterPress = false;\n        },\n        setPressedDown(ctx2) {\n          ctx2.wasPressedDown = true;\n        },\n        clearPressedDown(ctx2) {\n          ctx2.wasPressedDown = false;\n        },\n        preventContextMenu(ctx2) {\n          if (ctx2.pointerType !== \"touch\" || !ctx2.onLongPress)\n            return;\n          const onContextMenu = (event) => event.preventDefault();\n          const cleanup = addDomEvent(ctx2.target, \"contextmenu\", onContextMenu, { once: true });\n          const onPointerUp = () => void setTimeout(cleanup, 30);\n          addDomEvent(dom.getWin(ctx2), \"pointerup\", onPointerUp, { once: true });\n        }\n      }\n    }\n  );\n}\n\nexport {\n  machine\n};\n"],
  "mappings": "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",
  "names": []
}
