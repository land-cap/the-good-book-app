import {
  createStore,
  reconcile
} from "./chunk-GP4UHQVM.js";
import {
  createEffect,
  onCleanup,
  onMount
} from "./chunk-UR4ZDNLI.js";
import {
  deepMerge,
  mergeProps
} from "./chunk-MYDS4API.js";
import "./chunk-ENY474MH.js";

// node_modules/.pnpm/hyphenate-style-name@1.0.4/node_modules/hyphenate-style-name/index.js
var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};
function toHyphenLower(match) {
  return "-" + match.toLowerCase();
}
function hyphenateStyleName(name) {
  if (cache.hasOwnProperty(name)) {
    return cache[name];
  }
  var hName = name.replace(uppercasePattern, toHyphenLower);
  return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
}
var hyphenate_style_name_default = hyphenateStyleName;

// node_modules/.pnpm/@zag-js+solid@0.5.0_solid-js@1.7.2/node_modules/@zag-js/solid/dist/chunk-GYNI3YX2.mjs
var isArray = (v) => Array.isArray(v);
var isObject = (v) => !(v == null || typeof v !== "object" || isArray(v));
var isNumber = (v) => typeof v === "number" && !Number.isNaN(v);
var isString = (v) => typeof v === "string";
var format = (v) => v.startsWith("--") ? v : hyphenate_style_name_default(v);
function cssify(style) {
  let css = {};
  for (const property in style) {
    const value = style[property];
    if (!isString(value) && !isNumber(value))
      continue;
    css[format(property)] = value;
  }
  return css;
}

// node_modules/.pnpm/@zag-js+types@0.5.0/node_modules/@zag-js/types/dist/chunk-D5R2W3NO.mjs
function createNormalizer(fn) {
  return new Proxy({}, {
    get() {
      return fn;
    }
  });
}

// node_modules/.pnpm/@zag-js+solid@0.5.0_solid-js@1.7.2/node_modules/@zag-js/solid/dist/chunk-72O6R62Z.mjs
var eventMap = {
  onFocus: "onFocusIn",
  onBlur: "onFocusOut",
  onDoubleClick: "onDblClick",
  onChange: "onInput",
  defaultChecked: "checked",
  defaultValue: "value",
  htmlFor: "for",
  className: "class"
};
function toSolidProp(prop) {
  return prop in eventMap ? eventMap[prop] : prop;
}
var normalizeProps = createNormalizer((props) => {
  const normalized = {};
  for (const key in props) {
    const value = props[key];
    if (key === "style" && isObject(value)) {
      normalized["style"] = cssify(value);
      continue;
    }
    if (key === "children") {
      if (isString(value)) {
        normalized["textContent"] = value;
      }
      continue;
    }
    normalized[toSolidProp(key)] = value;
  }
  return normalized;
});

// node_modules/.pnpm/@zag-js+solid@0.5.0_solid-js@1.7.2/node_modules/@zag-js/solid/dist/chunk-3BOWJIDB.mjs
function useActor(service) {
  const [state, setState] = createStore(service.getState());
  onMount(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState(reconcile(nextState));
    });
    onCleanup(() => {
      unsubscribe();
    });
  });
  return [state, service.send];
}

// node_modules/.pnpm/@zag-js+solid@0.5.0_solid-js@1.7.2/node_modules/@zag-js/solid/dist/chunk-LAWKLQEP.mjs
function useService(machine, options) {
  const { actions, state: hydratedState, context } = options ?? {};
  const service = (() => {
    const _machine = typeof machine === "function" ? machine() : machine;
    const contextValue = typeof context === "function" ? context() : context;
    return contextValue ? _machine.withContext(contextValue) : _machine;
  })();
  onMount(() => {
    service.start(hydratedState);
    if (service.state.can("SETUP")) {
      service.send("SETUP");
    }
    onCleanup(() => {
      service.stop();
    });
  });
  createEffect(() => {
    const contextValue = typeof context === "function" ? context() : context;
    service.setContext(contextValue);
  });
  createEffect(() => {
    service.setOptions({ actions });
  });
  return service;
}
function useMachine(machine, options) {
  const service = useService(machine, options);
  const [state, setState] = createStore(service.getState());
  onMount(() => {
    const unsubscribe = service.subscribe((nextState) => {
      setState(reconcile(nextState));
    });
    onCleanup(() => {
      unsubscribe();
    });
  });
  return [state, service.send, service];
}
export {
  deepMerge,
  mergeProps,
  normalizeProps,
  useActor,
  useMachine,
  useService
};
//# sourceMappingURL=@zag-js_solid.js.map
